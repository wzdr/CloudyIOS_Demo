{"Name":"SWTableViewCell","Id":2313,"Alias":"swtableviewcell","Description":"\r\n**SWTableViewCell** is an easy-to-use UITableViewCell subclass that implements a \r\nswipeable content view which exposes utility buttons (similar to iOS 7 Mail \r\nApplication)\r\n\r\n## Functionality\r\n\r\n### Right Utility Buttons\r\nUtility buttons that become visible on the right side of the Table View Cell \r\nwhen the user swipes left. This behavior is similar to that seen in the iOS \r\napps Mail and Reminders.\r\n\r\n### Left Utility Buttons\r\nUtility buttons that become visible on the left side of the Table View Cell \r\nwhen the user swipes right. \r\n\r\n### Features\r\n* Dynamic utility button scaling: \r\n  As you add more buttons to a cell, the other buttons on that side get smaller \r\n  to make room\r\n* Smart selection: \r\n  The cell will pick up touch events and either scroll the cell back to center \r\n  or fire the delegate method `RowSelected()`.  \r\n  The cell will not be considered selected when the user touches the cell while \r\n  utility buttons are visible, instead the cell will slide back into place (same \r\n  as iOS 7 Mail App functionality)\r\n* Create utility buttons with either a title or an icon along with a RGB color\r\n\r\n## Usage\r\n\r\n### Standard Table View Cells\r\n\r\nIn your table view delegate, the `GetCell()` method you set up the `SWTableViewCell` \r\nand add an arbitrary amount of utility buttons to it, using the \r\n`LeftUtilityButtons` and `RightUtilityButtons` properties of the \r\n`SWTableViewCell` instance.\r\n\r\nTo make use of `SWTableViewCell` from the designer, without having to create a \r\nnew type, just specify \"SWTableViewCell\" as the class. \r\n\r\n### Custom Table View Cells\r\n\r\nThe first step is to design your cell either in a standalone nib or inside of a \r\ntable view using prototype cells. Make sure to set the custom class on the cell \r\nin interface builder to the subclass you made for it. Then your new type should \r\nbe a subclass of `SWTableViewCell`\r\n\r\nIf you are using a separate nib and not a prototype cell, you\u0027ll need to be sure \r\nto register the nib in your table view.\r\n\r\nThen, in the `GetCell` method of your `UITableViewDelegate`, initialize your \r\ncustom cell.\r\n\r\n### Delegate\r\n\r\nThe delegate `ISWTableViewCellDelegate` is used by the developer to find out \r\nwhich button was pressed, along with a few other useful events:\r\n\r\n    // informs that a new state (left, right, center) is happening\r\n    void ScrollingToState(SWTableViewCell cell, SWCellState state)\r\n    \r\n    // informs that a utility button has been tapped on the right\r\n    void DidTriggerLeftUtilityButton(SWTableViewCell cell, int index)\r\n    \r\n    // informs that a utility button has been tapped on the left\r\n    void DidTriggerRightUtilityButton(SWTableViewCell cell, int index)\r\n    \r\n    // when a new cell is opening, ask whether should it close this one \r\n    bool ShouldHideUtilityButtonsOnSwipe(SWTableViewCell cell)\r\n  \r\n    // ask whether a certain cell can be opened\r\n    bool CanSwipeToState(SWTableViewCell cell, SWCellState state)\r\n\r\nThe index signifies which utility button the user pressed, for each side the \r\nbutton indices are ordered from right to left 0...n\r\n","Version":"0.3.7.0","Summary":"An easy-to-use UITableViewCell subclass that implements a swipeable content view which exposes utility buttons (similar to iOS 7 Mail Application).","QuickStart":"\r\n**SWTableViewCell** is an easy-to-use UITableViewCell subclass that implements a \r\nswipeable content view which exposes utility buttons (similar to iOS 7 Mail \r\nApplication)\r\n\r\n## Functionality\r\n\r\n### Right Utility Buttons\r\nUtility buttons that become visible on the right side of the Table View Cell \r\nwhen the user swipes left. This behavior is similar to that seen in the iOS \r\napps Mail and Reminders.\r\n\r\n### Left Utility Buttons\r\nUtility buttons that become visible on the left side of the Table View Cell \r\nwhen the user swipes right. \r\n\r\n### Features\r\n* Dynamic utility button scaling: \r\n  As you add more buttons to a cell, the other buttons on that side get smaller \r\n  to make room\r\n* Smart selection: \r\n  The cell will pick up touch events and either scroll the cell back to center \r\n  or fire the delegate method `RowSelected()`.  \r\n  The cell will not be considered selected when the user touches the cell while \r\n  utility buttons are visible, instead the cell will slide back into place (same \r\n  as iOS 7 Mail App functionality)\r\n* Create utility buttons with either a title or an icon along with a RGB color\r\n\r\n## Usage\r\n\r\n### Standard Table View Cells\r\n\r\nIn your table view delegate, the `GetCell()` method you set up the `SWTableViewCell` \r\nand add an arbitrary amount of utility buttons to it, using the \r\n`LeftUtilityButtons` and `RightUtilityButtons` properties of the \r\n`SWTableViewCell` instance.\r\n\r\nTo make use of `SWTableViewCell` from the designer, without having to create a \r\nnew type, just specify \"SWTableViewCell\" as the class. \r\n\r\n### Custom Table View Cells\r\n\r\nThe first step is to design your cell either in a standalone nib or inside of a \r\ntable view using prototype cells. Make sure to set the custom class on the cell \r\nin interface builder to the subclass you made for it. Then your new type should \r\nbe a subclass of `SWTableViewCell`\r\n\r\nIf you are using a separate nib and not a prototype cell, you\u0027ll need to be sure \r\nto register the nib in your table view.\r\n\r\nThen, in the `GetCell` method of your `UITableViewDelegate`, initialize your \r\ncustom cell.\r\n\r\n### Delegate\r\n\r\nThe delegate `ISWTableViewCellDelegate` is used by the developer to find out \r\nwhich button was pressed, along with a few other useful events:\r\n\r\n    // informs that a new state (left, right, center) is happening\r\n    void ScrollingToState(SWTableViewCell cell, SWCellState state)\r\n    \r\n    // informs that a utility button has been tapped on the right\r\n    void DidTriggerLeftUtilityButton(SWTableViewCell cell, int index)\r\n    \r\n    // informs that a utility button has been tapped on the left\r\n    void DidTriggerRightUtilityButton(SWTableViewCell cell, int index)\r\n    \r\n    // when a new cell is opening, ask whether should it close this one \r\n    bool ShouldHideUtilityButtonsOnSwipe(SWTableViewCell cell)\r\n  \r\n    // ask whether a certain cell can be opened\r\n    bool CanSwipeToState(SWTableViewCell cell, SWCellState state)\r\n\r\nThe index signifies which utility button the user pressed, for each side the \r\nbutton indices are ordered from right to left 0...n\r\n","Hash":"a7e1c1d7bc95ca99b2c66fbb40b41b0c","TargetPlatforms":["ios","ios-unified"],"TrialHash":null}